{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about/","text":"About Researchers Madison: Supervisor Ford: Lab Manager ... Developers Kevin: Technical Manager Jake: Lead Developer for Correlation Team ...","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#researchers","text":"Madison: Supervisor Ford: Lab Manager ...","title":"Researchers"},{"location":"about/#developers","text":"Kevin: Technical Manager Jake: Lead Developer for Correlation Team ...","title":"Developers"},{"location":"welcome/","text":"Welcome to VCL The VCL web application allows researchers to conduct experiments online and save experiment results in a database. The application uses Prolific, Heroku, JavaScript, Node.js, and Firestore database. Local Set Up 1) Git clone the repository git clone https://github.com/UBC-VCL/VCLWebFramework.git cd VCLWebFramework 2) Install Node 3) Install dependencies npm install 4) Run the application node app.js Or alternatively, with nodemon: nodemon app.js","title":"Welcome"},{"location":"welcome/#welcome-to-vcl","text":"The VCL web application allows researchers to conduct experiments online and save experiment results in a database. The application uses Prolific, Heroku, JavaScript, Node.js, and Firestore database.","title":"Welcome to VCL"},{"location":"welcome/#local-set-up","text":"1) Git clone the repository git clone https://github.com/UBC-VCL/VCLWebFramework.git cd VCLWebFramework 2) Install Node 3) Install dependencies npm install 4) Run the application node app.js Or alternatively, with nodemon: nodemon app.js","title":"Local Set Up"},{"location":"development/architecture/","text":"Architecture Flow Diagram Due to the COVID-19 pandemic, our team felt increasing urgency in implementing a version of the framework that was ready for running experiments online. We ended up deploying online with Heroku with Cloud Firestore as the database, and Prolific for the participant hub. This required major feature changes such as routing, resolution scaling, screening tasks. Detailed documentation Experiment Application Architecture Experiments are displayed on the browser (client) with a URL created by Heroku ( https://vcl-web.herokuapp.com ). Sequence Diagram","title":"Architecture"},{"location":"development/architecture/#architecture","text":"","title":"Architecture"},{"location":"development/architecture/#flow-diagram","text":"Due to the COVID-19 pandemic, our team felt increasing urgency in implementing a version of the framework that was ready for running experiments online. We ended up deploying online with Heroku with Cloud Firestore as the database, and Prolific for the participant hub. This required major feature changes such as routing, resolution scaling, screening tasks. Detailed documentation","title":"Flow Diagram"},{"location":"development/architecture/#experiment-application-architecture","text":"Experiments are displayed on the browser (client) with a URL created by Heroku ( https://vcl-web.herokuapp.com ).","title":"Experiment Application Architecture"},{"location":"development/architecture/#sequence-diagram","text":"","title":"Sequence Diagram"},{"location":"development/backlog/","text":"Backlog Development Progress bar jsPsych Automatic Progress Bar Save interaction data from the user jsPsych Record Browser Interactions Understand how balancing works Implement refactoring to other experiments HR Hire a developer and UX designer","title":"Backlog"},{"location":"development/backlog/#backlog","text":"","title":"Backlog"},{"location":"development/backlog/#development","text":"Progress bar jsPsych Automatic Progress Bar Save interaction data from the user jsPsych Record Browser Interactions Understand how balancing works Implement refactoring to other experiments","title":"Development"},{"location":"development/backlog/#hr","text":"Hire a developer and UX designer","title":"HR"},{"location":"development/create_new_experiment/","text":"Create New Experiment Caution Under construction","title":"Create New Experiment"},{"location":"development/create_new_experiment/#create-new-experiment","text":"Caution Under construction","title":"Create New Experiment"},{"location":"development/getting_started/","text":"Getting Started This onboarding tutorial is meant to supplement and guide you so that you can dive into working with us on our VCL web framework You should take the time to go over the Architecture section in addition to the role that you are onboarding for (either \u2018Software Developer\u2019 or \u2018Technical Researcher\u2019, you don\u2019t have to read both ). Please keep in mind that roles in our team are not rigid, and you will not be pigeonholed into a single role. The idea of splitting up roles into \u2018Software Developer\u2019 and \u2018Technical Researcher\u2019 stemmed from the necessity of simplifying the onboarding process, as the codebase is quite daunting for new members initially. You will likely onboard with the role that you are interested in, but after onboarding, the role that you have within our team will likely be quite fluid depending on the needs of the lab and your personal goals and interests. Lastly, as you probably know, Google and StackOverflow will be your best friend when working with a new codebase, and if you have any questions, feel free to message our senior members on Slack. The tutorial will assume that you have little baseline knowledge of our tech stack, but feel free to skip over parts that you are already familiar with. Technical Researcher Onboarding If you\u2019ve chosen this route, you will likely work with developing experiments/conditions for research purposes. You might even be a COGS 402 student, as we\u2019ve noticed many past members go with this path as a student in that course. This section will provide some background on what we feel are the necessary skills to succeed in this role. Prerequisite Knowledge - Technical Researcher Note Please feel free to skip over the skills you are already experienced with. Github Github is a hosting platform for Git version control, and it allows different users to remotely collaborate on the same project. We use Github to host our VCL web framework repository. The main skills you will need with regards to git are understanding branches, commits, and pull requests. Please refer to this beginner guide to learn more. The code review process for our team ensures that the code written fits the lab\u2019s coding standards and does not introduce unwanted bugs. We don\u2019t necessarily have formal code reviewers assigned as of right now, but generally speaking, you can assign any senior coding team member to review a branch pull request. Popular Git GUIs: (You can use a GUI or just Git Bash whichever is most comfortable for you) SourceTree GitKraken GitHub Desktop Download Git JavaScript We recommend understanding the basics of Javascript and HTML before attempting to understand the framework. Here are a few resources: JavaScript JavaScript Mozilla documentation HTML The comprehensive references are mainly useful when writing code and you might forget the language syntax. JsPsych jsPsych is the backbone of our application and is the main reason why we transitioned from a Java framework to a JavaScript framework back in 2018. JsPsych is the go-to JavaScript library for running psych experiments in a browser. The timeline array provides an intuitive way to design and structure experiments for both developers and researchers. The jsPsych documentation provides a comprehensive guide for how to use the library. We recommend checking out their \u201cHello World\u201d and \u201cSimple Reaction Time Task\u201d Tutorials: Hello World Tutorial rt-task Tutorial D3 D3 is a data visualization library for JavaScript. We use D3 to generate the plots for all of the experiments that we run. We recommend becoming familiar with D3 if you are creating a new condition. Success Congrats on finishing the Technical Researcher section! You can continue to the concluding section now. Software Developer Onboarding If you\u2019ve chosen this route, you will be working with the framework as a whole to develop new features, fix bugs, and support researchers in developing new conditions and experiments. This section will provide some background on what we feel are the necessary skills to succeed in this role. Prerequisite Knowledge Please feel free to skip over the skills you are already experienced with. Github Github is a hosting platform for Git version control, and it allows different users to remotely collaborate on the same project. We use Github to host our VCL web framework repository. The main skills you will need with regards to git are understanding branches, commits, and pull requests. Please refer to this beginner guide to learn more. The code review process for our team ensures that the code written fits the lab\u2019s coding standards and does not introduce unwanted bugs. We don\u2019t necessarily have formal code reviewers assigned as of right now, but generally speaking, you can assign any senior coding team member to review a branch pull request. Popular Git GUIs: (You can use a GUI or just Git Bash whichever is most comfortable for you) SourceTree GitKraken GitHub Desktop Download Git JavaScript We recommend understanding the basics of Javascript and HTML before attempting to understand the framework. Here are a few resources: JavaScript JavaScript Mozilla documentation HTML CSS jQuery The comprehensive references are mainly useful when writing code and you might forget the language syntax. Express.js + Node.js + NPM Node.js is a JavaScript runtime built on the Chrome V8 engine. One of the primary ways it is used is to allow Javascript code to be run server-side. Think of Node.js as a way to run Javascript code similarly to how Java or Python code are run using their respective runtime environments. Node.js is just a way for us to run Javascript code outside of a browser environment. Along with Node.js we use a tool called Node Package Manager (npm). npm is a package registry that contains Node.js code libraries which are useful for development. It is used to handle dependency management, version management, and package installation primarily through the CLI. Express is a web application framework and standard server framework for Node.js, and it provides a bunch of features for building web-apps and APIs. We use express to handle routing (GET and POSTrequests), middleware functions (functions called when a request is received on the specified URL), and also start the localhost server for development testing. Express Routing Express Middleware body-parser Web APIs and HTTP Application Programming Interfaces (APIs) are a way for a web client to interact with a web service and utilizes the Hypertext Transfer Protocol (HTTP) to perform queries. APIs written with ExpressJS are composed of many routes and middleware functions, and each route has one middleware function associated with it. Routes are used to define the \u201cendpoint\u201d or specific URL in which the request is expected to occur. Middleware functions define the behaviour of the API when a certain request is made on a specified URL from the routing. Middleware functions also define expected information in a request, and it also specifies how the API responds to the request (either with information or error messages). We primarily use our API written in app.js as a means to serve web pages. In general, web APIs use four main HTTP methods to achieve a robust interface: GET, POST, PUT, and DELETE. For the purpose of our framework, you mainly need to understand GET and POST requests. GET When you perform a GET request on a specific URL, you retrieve information without modifying it in any way. The data that you receive in a GET request is specified by the response of the server. Think of it as getting information from a collection. If for example, I want to get all users from an arbitrary API, I could make a GET request to \u201chttps://{example_API_root}.com/users/\u201d. Where \u201c{example_API_root}\u201d is the root URL of the host server, and \u201c/users/\u201d is specified by the routing. POST A POST request is primarily used to create a new resource. Think of it as adding new information to a collection. Note that this is an oversimplification of APIs and HTTP, and if you want to gain a better understanding of building APIs (such as with RESTful concepts), we recommend these links: ELI5 for APIs HTTP Requests RESTful APIs JsPsych jsPsych is the backbone of our application and is the main reason why we transitioned from a Java framework to a JavaScript framework back in 2018. JsPsych is the go-to JavaScript library for running psych experiments in a browser. The timeline array provides an intuitive way to design and structure experiments for both developers and researchers. The jsPsych documentation provides a comprehensive guide for how to use the library. We recommend checking out their \u201cHello World\u201d and \u201cSimple Reaction Time Task\u201d Tutorials: Hello World Tutorial rt-task Tutorial Success Congrats on finishing the Software Developer section! Technical Debt and Writing \u201cGood\u201d Code Writing good code is hard. It takes years of experience to learn best practices well, and even the most experienced programmers will write shitty code from time to time. Nonetheless, in a project with as many moving pieces as our codebase, it is important to try our best to write \u201cgood\u201d code and minimize technical debt. Technical debt is a concept in software development that reflects the implied cost of additional work caused by choosing an easy solution now instead of using a better approach that would take longer. Some examples are messy code formatting , duplications, unnecessarily large time complexity, architectural flaws, lacking documentation and other bad coding practices. Note that our team isn\u2019t large, and as a result, relatively significant amounts of technical debt will naturally accumulate over time. It\u2019s important to assess the choices we make to minimize technical debt build-up while also balancing the time it takes to implement the \u2018optimal solution\u2019. Some examples of technical debt present in our codebase right now (2021/02/07): Using jQuery over a more modern front-end library (such as React or Vue) Server-side architecture is nonoptimal, and basically, the only purpose of the express server is to serve static (mostly HTML) files to the client Not using best practices in coding. Ex. Using var to instantiate variables where let or const would be better Repetitive code in places such as experiment and trial display HTML files It is important to note that these fundamental design choices were likely made very early on in the design process of our framework, but as a result, developers in the present and future will need to work around these decisions long after they were made. This is not to say that those decisions were necessarily \u2018wrong\u2019 at the time. It is likely that they were developed with scope and stakeholders entirely considered, but as time went on, the stakeholder needs changed. But now, the design choices made early in development would require a massive refactor to change. In essence, think about minimizing technical debt as you are implementing new features, but not at the expense of sanity. Abstract for when you think there will be a use case for in the future, but not just for the sake of doing it. Next Steps Congrats on getting through our onboarding documentation! For your next steps please try to complete the following tasks: Implement your own Express.js server in Node.js to display \u201chello world\u201d. (Software Developer only) Complete the jsPsych Hello World Tutorial and rt-task Tutorial Make a new branch off of \u201cmaster\u201d and modify the codebase so that it can display large bullseyes instead of dots for JND foundational scatterplots. Most of the coding that you will need to do can be found in the codebase already, and you will just need to modify some config files, the jnd data file, and the scatter plot file to produce those bullseye dots. You may find that there is already a bullseye case for the point shape, you can base the new bullseye off of this previous case. You can get creative with the actual bullseye dimensions and colours. When you are done, make a merge pull request to \u201cmaster\u201d and senior members on the team can review your code.","title":"Getting Started"},{"location":"development/getting_started/#getting-started","text":"This onboarding tutorial is meant to supplement and guide you so that you can dive into working with us on our VCL web framework You should take the time to go over the Architecture section in addition to the role that you are onboarding for (either \u2018Software Developer\u2019 or \u2018Technical Researcher\u2019, you don\u2019t have to read both ). Please keep in mind that roles in our team are not rigid, and you will not be pigeonholed into a single role. The idea of splitting up roles into \u2018Software Developer\u2019 and \u2018Technical Researcher\u2019 stemmed from the necessity of simplifying the onboarding process, as the codebase is quite daunting for new members initially. You will likely onboard with the role that you are interested in, but after onboarding, the role that you have within our team will likely be quite fluid depending on the needs of the lab and your personal goals and interests. Lastly, as you probably know, Google and StackOverflow will be your best friend when working with a new codebase, and if you have any questions, feel free to message our senior members on Slack. The tutorial will assume that you have little baseline knowledge of our tech stack, but feel free to skip over parts that you are already familiar with.","title":"Getting Started"},{"location":"development/getting_started/#technical-researcher-onboarding","text":"If you\u2019ve chosen this route, you will likely work with developing experiments/conditions for research purposes. You might even be a COGS 402 student, as we\u2019ve noticed many past members go with this path as a student in that course. This section will provide some background on what we feel are the necessary skills to succeed in this role.","title":"Technical Researcher Onboarding"},{"location":"development/getting_started/#prerequisite-knowledge-technical-researcher","text":"Note Please feel free to skip over the skills you are already experienced with.","title":"Prerequisite Knowledge - Technical Researcher"},{"location":"development/getting_started/#github","text":"Github is a hosting platform for Git version control, and it allows different users to remotely collaborate on the same project. We use Github to host our VCL web framework repository. The main skills you will need with regards to git are understanding branches, commits, and pull requests. Please refer to this beginner guide to learn more. The code review process for our team ensures that the code written fits the lab\u2019s coding standards and does not introduce unwanted bugs. We don\u2019t necessarily have formal code reviewers assigned as of right now, but generally speaking, you can assign any senior coding team member to review a branch pull request. Popular Git GUIs: (You can use a GUI or just Git Bash whichever is most comfortable for you) SourceTree GitKraken GitHub Desktop Download Git","title":"Github"},{"location":"development/getting_started/#javascript","text":"We recommend understanding the basics of Javascript and HTML before attempting to understand the framework. Here are a few resources: JavaScript JavaScript Mozilla documentation HTML The comprehensive references are mainly useful when writing code and you might forget the language syntax.","title":"JavaScript"},{"location":"development/getting_started/#jspsych","text":"jsPsych is the backbone of our application and is the main reason why we transitioned from a Java framework to a JavaScript framework back in 2018. JsPsych is the go-to JavaScript library for running psych experiments in a browser. The timeline array provides an intuitive way to design and structure experiments for both developers and researchers. The jsPsych documentation provides a comprehensive guide for how to use the library. We recommend checking out their \u201cHello World\u201d and \u201cSimple Reaction Time Task\u201d Tutorials: Hello World Tutorial rt-task Tutorial","title":"JsPsych"},{"location":"development/getting_started/#d3","text":"D3 is a data visualization library for JavaScript. We use D3 to generate the plots for all of the experiments that we run. We recommend becoming familiar with D3 if you are creating a new condition. Success Congrats on finishing the Technical Researcher section! You can continue to the concluding section now.","title":"D3"},{"location":"development/getting_started/#software-developer-onboarding","text":"If you\u2019ve chosen this route, you will be working with the framework as a whole to develop new features, fix bugs, and support researchers in developing new conditions and experiments. This section will provide some background on what we feel are the necessary skills to succeed in this role. Prerequisite Knowledge Please feel free to skip over the skills you are already experienced with.","title":"Software Developer Onboarding"},{"location":"development/getting_started/#github_1","text":"Github is a hosting platform for Git version control, and it allows different users to remotely collaborate on the same project. We use Github to host our VCL web framework repository. The main skills you will need with regards to git are understanding branches, commits, and pull requests. Please refer to this beginner guide to learn more. The code review process for our team ensures that the code written fits the lab\u2019s coding standards and does not introduce unwanted bugs. We don\u2019t necessarily have formal code reviewers assigned as of right now, but generally speaking, you can assign any senior coding team member to review a branch pull request. Popular Git GUIs: (You can use a GUI or just Git Bash whichever is most comfortable for you) SourceTree GitKraken GitHub Desktop Download Git","title":"Github"},{"location":"development/getting_started/#javascript_1","text":"We recommend understanding the basics of Javascript and HTML before attempting to understand the framework. Here are a few resources: JavaScript JavaScript Mozilla documentation HTML CSS jQuery The comprehensive references are mainly useful when writing code and you might forget the language syntax.","title":"JavaScript"},{"location":"development/getting_started/#expressjs-nodejs-npm","text":"Node.js is a JavaScript runtime built on the Chrome V8 engine. One of the primary ways it is used is to allow Javascript code to be run server-side. Think of Node.js as a way to run Javascript code similarly to how Java or Python code are run using their respective runtime environments. Node.js is just a way for us to run Javascript code outside of a browser environment. Along with Node.js we use a tool called Node Package Manager (npm). npm is a package registry that contains Node.js code libraries which are useful for development. It is used to handle dependency management, version management, and package installation primarily through the CLI. Express is a web application framework and standard server framework for Node.js, and it provides a bunch of features for building web-apps and APIs. We use express to handle routing (GET and POSTrequests), middleware functions (functions called when a request is received on the specified URL), and also start the localhost server for development testing. Express Routing Express Middleware body-parser","title":"Express.js + Node.js + NPM"},{"location":"development/getting_started/#web-apis-and-http","text":"Application Programming Interfaces (APIs) are a way for a web client to interact with a web service and utilizes the Hypertext Transfer Protocol (HTTP) to perform queries. APIs written with ExpressJS are composed of many routes and middleware functions, and each route has one middleware function associated with it. Routes are used to define the \u201cendpoint\u201d or specific URL in which the request is expected to occur. Middleware functions define the behaviour of the API when a certain request is made on a specified URL from the routing. Middleware functions also define expected information in a request, and it also specifies how the API responds to the request (either with information or error messages). We primarily use our API written in app.js as a means to serve web pages. In general, web APIs use four main HTTP methods to achieve a robust interface: GET, POST, PUT, and DELETE. For the purpose of our framework, you mainly need to understand GET and POST requests. GET When you perform a GET request on a specific URL, you retrieve information without modifying it in any way. The data that you receive in a GET request is specified by the response of the server. Think of it as getting information from a collection. If for example, I want to get all users from an arbitrary API, I could make a GET request to \u201chttps://{example_API_root}.com/users/\u201d. Where \u201c{example_API_root}\u201d is the root URL of the host server, and \u201c/users/\u201d is specified by the routing. POST A POST request is primarily used to create a new resource. Think of it as adding new information to a collection. Note that this is an oversimplification of APIs and HTTP, and if you want to gain a better understanding of building APIs (such as with RESTful concepts), we recommend these links: ELI5 for APIs HTTP Requests RESTful APIs","title":"Web APIs and HTTP"},{"location":"development/getting_started/#jspsych_1","text":"jsPsych is the backbone of our application and is the main reason why we transitioned from a Java framework to a JavaScript framework back in 2018. JsPsych is the go-to JavaScript library for running psych experiments in a browser. The timeline array provides an intuitive way to design and structure experiments for both developers and researchers. The jsPsych documentation provides a comprehensive guide for how to use the library. We recommend checking out their \u201cHello World\u201d and \u201cSimple Reaction Time Task\u201d Tutorials: Hello World Tutorial rt-task Tutorial Success Congrats on finishing the Software Developer section!","title":"JsPsych"},{"location":"development/getting_started/#technical-debt-and-writing-good-code","text":"Writing good code is hard. It takes years of experience to learn best practices well, and even the most experienced programmers will write shitty code from time to time. Nonetheless, in a project with as many moving pieces as our codebase, it is important to try our best to write \u201cgood\u201d code and minimize technical debt. Technical debt is a concept in software development that reflects the implied cost of additional work caused by choosing an easy solution now instead of using a better approach that would take longer. Some examples are messy code formatting , duplications, unnecessarily large time complexity, architectural flaws, lacking documentation and other bad coding practices. Note that our team isn\u2019t large, and as a result, relatively significant amounts of technical debt will naturally accumulate over time. It\u2019s important to assess the choices we make to minimize technical debt build-up while also balancing the time it takes to implement the \u2018optimal solution\u2019. Some examples of technical debt present in our codebase right now (2021/02/07): Using jQuery over a more modern front-end library (such as React or Vue) Server-side architecture is nonoptimal, and basically, the only purpose of the express server is to serve static (mostly HTML) files to the client Not using best practices in coding. Ex. Using var to instantiate variables where let or const would be better Repetitive code in places such as experiment and trial display HTML files It is important to note that these fundamental design choices were likely made very early on in the design process of our framework, but as a result, developers in the present and future will need to work around these decisions long after they were made. This is not to say that those decisions were necessarily \u2018wrong\u2019 at the time. It is likely that they were developed with scope and stakeholders entirely considered, but as time went on, the stakeholder needs changed. But now, the design choices made early in development would require a massive refactor to change. In essence, think about minimizing technical debt as you are implementing new features, but not at the expense of sanity. Abstract for when you think there will be a use case for in the future, but not just for the sake of doing it.","title":"Technical Debt and Writing \u201cGood\u201d Code"},{"location":"development/getting_started/#next-steps","text":"Congrats on getting through our onboarding documentation! For your next steps please try to complete the following tasks: Implement your own Express.js server in Node.js to display \u201chello world\u201d. (Software Developer only) Complete the jsPsych Hello World Tutorial and rt-task Tutorial Make a new branch off of \u201cmaster\u201d and modify the codebase so that it can display large bullseyes instead of dots for JND foundational scatterplots. Most of the coding that you will need to do can be found in the codebase already, and you will just need to modify some config files, the jnd data file, and the scatter plot file to produce those bullseye dots. You may find that there is already a bullseye case for the point shape, you can base the new bullseye off of this previous case. You can get creative with the actual bullseye dimensions and colours. When you are done, make a merge pull request to \u201cmaster\u201d and senior members on the team can review your code.","title":"Next Steps"},{"location":"research/experiments/","text":"Experiments These are the following experiments supported by our framework's master branch. The table lists the values for the different identifiers used. There may be additional or alternative experiments existing in different branches along with different projects. JND Paradigm : Discrimination Adjustment Type : Adaptive Psychophysical Procedures Response Type : 2AFC Dependent Measure : Precision The JND experiment presents users with 2 plots, one with a higher correlation than the other. The user then must choose the graph with the higher correlation by pressing the 'z' or 'm' keys to select the left or right graphs respectively. JND Radius Paradigm : Discrimination Adjustment Type : Adaptive Psychophysical Procedures Response Type : 2AFC Dependent Measure : Precision This JND experiment presents users with 2 different shapes, one with a larger area than the other. The user then must choose the shape with the greater area by pressing the 'z' or 'm' keys to select the left or right graphs respectively. Stevens Paradigm : Estimation Adjustment Type : Method of Adjustments Response Type : Stimulus Level Dependent Measure : Accuracy The Stevens experiment presents users with 3 plots. The user then must adjust the correlation of the middle plot by pressing the 'z' or 'm' keys to increase or decrease the correlation, respectively. The goal is to adjust the middle plot so that its correlation is a midpoint between the 2 other plots, pressing spacebar when the estimate is made. Estimation Paradigm : Estimation Adjustment Type : Method of Adjustments Response Type : Stimulus Level Dependent Measure : Accuracy The Estimation experiment presents users with 2 shapes side-by-side. The task involves having to adjust the size of the modifiable shape so that it is the same size as the reference shape. Numerosity Paradigm : Estimation Adjustment Type : Method of Constant Stimuli Response Type : Stimulus Level Dependent Measure : Precision The Numerosity experiment presents users with 1 randomly distributed plot. The task involves counting the number of target points before the stimulus expires and moves onto the response page. The goal is to adjust the slider on the response page to estimate the number of target points the user saw. Visual Search Paradigm : Detection Adjustment Type : Method of Constant Stimuli Response Type : 2AFC Dependent Measure : Accuracy The Visual Search experiment presents users with a target square of a certain color before the experiment begins. After which, the user will see 1 randomly distributed plot and must determine if the target square is in the plot. Ensemble Average Paradigm : Estimation Adjustment Type : Method of Constant Stimuli Response Type : Stimulus Level Dependent Measure : Precision The Ensemble Average experiment presents users with a single scatterplot consisting of both target and distractor populations. Users will be cued on which features to attend to, and will be probed on corresponding feature information after each trial.","title":"Experiments"},{"location":"research/experiments/#experiments","text":"These are the following experiments supported by our framework's master branch. The table lists the values for the different identifiers used. There may be additional or alternative experiments existing in different branches along with different projects.","title":"Experiments"},{"location":"research/experiments/#jnd","text":"Paradigm : Discrimination Adjustment Type : Adaptive Psychophysical Procedures Response Type : 2AFC Dependent Measure : Precision The JND experiment presents users with 2 plots, one with a higher correlation than the other. The user then must choose the graph with the higher correlation by pressing the 'z' or 'm' keys to select the left or right graphs respectively.","title":"JND"},{"location":"research/experiments/#jnd-radius","text":"Paradigm : Discrimination Adjustment Type : Adaptive Psychophysical Procedures Response Type : 2AFC Dependent Measure : Precision This JND experiment presents users with 2 different shapes, one with a larger area than the other. The user then must choose the shape with the greater area by pressing the 'z' or 'm' keys to select the left or right graphs respectively.","title":"JND Radius"},{"location":"research/experiments/#stevens","text":"Paradigm : Estimation Adjustment Type : Method of Adjustments Response Type : Stimulus Level Dependent Measure : Accuracy The Stevens experiment presents users with 3 plots. The user then must adjust the correlation of the middle plot by pressing the 'z' or 'm' keys to increase or decrease the correlation, respectively. The goal is to adjust the middle plot so that its correlation is a midpoint between the 2 other plots, pressing spacebar when the estimate is made.","title":"Stevens"},{"location":"research/experiments/#estimation","text":"Paradigm : Estimation Adjustment Type : Method of Adjustments Response Type : Stimulus Level Dependent Measure : Accuracy The Estimation experiment presents users with 2 shapes side-by-side. The task involves having to adjust the size of the modifiable shape so that it is the same size as the reference shape.","title":"Estimation"},{"location":"research/experiments/#numerosity","text":"Paradigm : Estimation Adjustment Type : Method of Constant Stimuli Response Type : Stimulus Level Dependent Measure : Precision The Numerosity experiment presents users with 1 randomly distributed plot. The task involves counting the number of target points before the stimulus expires and moves onto the response page. The goal is to adjust the slider on the response page to estimate the number of target points the user saw.","title":"Numerosity"},{"location":"research/experiments/#visual-search","text":"Paradigm : Detection Adjustment Type : Method of Constant Stimuli Response Type : 2AFC Dependent Measure : Accuracy The Visual Search experiment presents users with a target square of a certain color before the experiment begins. After which, the user will see 1 randomly distributed plot and must determine if the target square is in the plot.","title":"Visual Search"},{"location":"research/experiments/#ensemble-average","text":"Paradigm : Estimation Adjustment Type : Method of Constant Stimuli Response Type : Stimulus Level Dependent Measure : Precision The Ensemble Average experiment presents users with a single scatterplot consisting of both target and distractor populations. Users will be cued on which features to attend to, and will be probed on corresponding feature information after each trial.","title":"Ensemble Average"},{"location":"research/terminology/","text":"Terminology Below is common terminology the lab uses when describing experiments. Describing an Experiment Every experiment is defined using a paradigm , an adjustment type , a response type , and a dependent measure . Experiments are further broken down into subdivisions called conditions . They are iterations on the same general experiment type with differences in things such as stimuli, balancing, or trial structure. Condition : Dictated by the task, the method(s) used, and the stimuli type. Subcondition : Individual experiment blocks containing a number of trials. Typically defined by a set of stable constants, demarked by independent variables. Trial : Marked by the user making a meaningful response/input that is purposely recorded. E.g. I am trying to adjust the correlation of a specific plot to be the midpoint between a plot with a high correlation, and a plot with a lower correlation. The final correlation that I have adjusted marks the relevant trial data to be saved. Paradigms According to Elliot et. al., \"Paradigms are the specific visual tasks viewers complete when using a visualization.\" Classification : Viewers identify a stimulus by categorizing it. Viewers may classify an entire display, specific regions within a display, or objects. Recognition : Viewers indicate whether they saw a stimulus previously. A common example of this task is presenting a set of images, and then later presenting a second set of images composed of new images as well as ones from the original set. Viewers then indicate which images in the second set is old or new. Localization : The viewer indicates the location of a stimulus. Some examples could be: clicking where a stimulus previously was, or pressing a key to indicate which region of a screen contains an object of interest. Detection : Requires the viewer to indicate whether or not they perceive the presence of a stimulus. Two common types of detection are visual search and change detection. Rapid Serial Visual Presentation (RSVP) : In the RSVP paradigm, viewers are shown a set of images quickly in a sequence, with at least one target image. Viewers then identify either the target image or target category (e.g. press the button when you see a positive correlation). Matching : The viewer adjusts one stimulus until it matches another. For instance, adjusting the size of a square until it has the same area as a rectangle also present on the screen. Discrimination : Viewers make comparative judgments about the magnitude of two stimuli, often side-by-side. For example: indicating which of two images has a higher total luminance. Identification : Viewers respond with the identity of the stimulus using open-ended answers. Estimation : Viewers directly estimate some value of a continuous feature in a display. Estimation paradigm experiments differ from the classification paradigm: where a viewer might classify a correlation as \"low\" or \"steep\", an estimation paradigm would require them to produce the magnitude numerically as \"0.2\" or \"0.8\". Adjustment Types Method of Limits [MoL] : The researcher steadily adjusts a property of a stimulus until it is seen or no longer seen by the participant. For example, displaying white dots on a white background, and darkening them until they are perceptible. This can be done either as ascending or descending, and it is not uncommon to see both within the same experiment. Method of Adjustments [MoA] : Similar to Method Limits, except it is the user who does the stimulus adjustments. For instance, a user adjusting the brightness of dots until they are perceptible or imperceptible. Method of Constant Stimuli [MoCS] : The researcher presents viewers with random levels of a target property, and the user is asked to draw inferences. From the previous examples, dots would be shown at various brightness levels, and the user indicates whether or not they are present or absent each trial. Adaptive Psychophysical Procedures [APP] : Researchers adjust visualizations for users based on their current performance relative to a threshold. A common APP used within the VCL Web Framework is staircasing, as seen in the JND experiment. Users indicate which of two scatterplots is more correlated. If the user responds correctly, the next pair of scatterplots have closer correlation values; if they respond incorrectly, the correlation values are farther apart. The adjustments continue until a steady-state criteria is met (e.g. 50% accuracy over n trials). Response Types Stimulus Level : Users give direct reports indicating perceived values. For example, dragging a slider to indicate the average height of bars in a bar chart. Viewers can report stimulus levels verbally, by typing in a value, or visually by recreating the stimulus level. 2AFC : Two-alternative forced-choice tasks give viewers two options of response after perceiving certain stimuli. For example, being shown two stimuli and asking users to indicate which one was darker. Two common choices for 2AFC are comparison and categorization. NAFC : The N-alternative forced-choice task is a scaled-up version of the 2AFC. For example, a 2AFC task might involve users indicating whether or not a chart matches a regression line 'yes' or 'no', while an NAFC might provide several charts and the user must choose one that matches. Dependent Measures Direct Dependent Measures : A single number directly measuring how well people process visual information. Some examples: Accuracy : Measures how close to the true value are people's judgments. Measured in two ways: percentage correct (how often they get the answer right), and error (how close they were). Response Time : Measures how quickly a task with one stimulus is completed. Precision : The variability of participants' answers, measured as a threshold of performance, for example, the level of brightness at which a stimulus becomes visible. One of the most common of these is a just noticeable difference (JND), a threshold at which people can generally detect a difference. Model-Based Dependent Measures : A model generated by factors such as (but not limited to) reaction time and accuracy. Performance Slope : Using accuracy or RT to model how these measures change as a function of the difficulty of the task. E.g. how quickly and accurately can a participant locate a target as the number of targets increases. Psychometric Function : Models how performance changes (e.g., the number of correct or incorrect decisions) as a function of design (e.g. the luminance range of a colormap). Sensitivity & Bias Detection : Models performance as a function of sensitivity (change as the data or design changes) and bias (tendency to a certain response). Properties Balancing : the ways in which the subconditions for a given condition are ordered. Random Latin-Square Graph Type : e.g. scatter plots, ring plots, strip plots, shapes Graphical Manipulation : May be on how the points are plotted e.g. for strip plots, a y coordinate defines the horizontal translation of the \"strip\" and x coordinate defines the height of the \"strip\". May be in terms of how many distributions are plotted on the same graph e.g. on the same axes, we can have TWO scatter plots with different correlations. Condition Identifiers Each condition is uniquely defined by 4 properties. Base Experiment The experiment that the condition is an iteration of. Trial Structure The trial structure represents the range or pattern of correlation values, and defines a set of constants for each subcondition. Each condition can follow these pattern of values, or use its own custom structure. The two main types of patterns are Design or Foundational. Foundational : 17 subconditions, base correlation is in the range of [0.0, 0.9] in 0.1 increments. Design : 15 subconditions, grouped into five sets of base correlation values set at 0.3, 0.6, 0.9 . Estimation Custom : used when a condition does not follow any of the above structures. Balancing How subconditions in a given condition get ordered. Randomized : Purely random. Latin Square : An n \u00d7 n array of n different elements such that each element will occur exactly once in each column and once in each row. For example, a 3 \u00d7 3 Latin Square would be ordered like this: C A B B C A A B C The objective of a Latin Square is to have participants with unique subcondition orderings. Additionally, it helps control randomness in such a way that biases are reduced, e.g. subcondition A is not randomly selected first at a disproportionate amount. Graph Types The type of graph used in the visualization. Scatter : Scatterplots. Strip : Strip plots. Ring : Ring plots. Shapes : Shapes appearing side by side. Attributes Any given condition will always have a base, trial structure, balancing and graph type. However, they will also have a set of variables that manipulate different aspects of the distribution, graphical properties of the visualization, and non-graphical properties such as having a custom instruction set. Here is a non-comprehensive list of properties that could be manipulated by a condition. Experimental attributes : Distribution type. Base correlation of the reference plot. Whether the correlation converges from above or below. Complete list of experimental attributes here . Graphical attributes : Some examples if plot type = scatter : Point shape Point color Point size Some examples if plot type = strip : Line length Line width Complete list of graphical attributes here . Definitions adapted from: Elliott, M. A., Nothelfer, C., Xiong, C., & Szafir, D. A. (2021). A Design Space of Vision Science Methods for Visualization Research. IEEE Transactions on Visualization and Computer Graphics , 27(2), 1117\u20131127. https://doi.org/10.1109/tvcg.2020.3029413 Pelli, D. G., & Farell, B. (2010). Psychophysical methods. In M. Bass, C. DeCusatis. J. Enoch, V. Lakshminarayanan, G. Li, C. MacDonald, V. Mahajan & E. V. Stryland (Eds.), Handbook of Optics. Third Edition, Volume III: Visioo and Vision Optics (pp. 3.1-3.12). New York: McGraw-Hill. https://denispelli.com/pubs/pelli2010methods.pdf","title":"Terminology"},{"location":"research/terminology/#terminology","text":"Below is common terminology the lab uses when describing experiments.","title":"Terminology"},{"location":"research/terminology/#describing-an-experiment","text":"Every experiment is defined using a paradigm , an adjustment type , a response type , and a dependent measure . Experiments are further broken down into subdivisions called conditions . They are iterations on the same general experiment type with differences in things such as stimuli, balancing, or trial structure. Condition : Dictated by the task, the method(s) used, and the stimuli type. Subcondition : Individual experiment blocks containing a number of trials. Typically defined by a set of stable constants, demarked by independent variables. Trial : Marked by the user making a meaningful response/input that is purposely recorded. E.g. I am trying to adjust the correlation of a specific plot to be the midpoint between a plot with a high correlation, and a plot with a lower correlation. The final correlation that I have adjusted marks the relevant trial data to be saved.","title":"Describing an Experiment"},{"location":"research/terminology/#paradigms","text":"According to Elliot et. al., \"Paradigms are the specific visual tasks viewers complete when using a visualization.\" Classification : Viewers identify a stimulus by categorizing it. Viewers may classify an entire display, specific regions within a display, or objects. Recognition : Viewers indicate whether they saw a stimulus previously. A common example of this task is presenting a set of images, and then later presenting a second set of images composed of new images as well as ones from the original set. Viewers then indicate which images in the second set is old or new. Localization : The viewer indicates the location of a stimulus. Some examples could be: clicking where a stimulus previously was, or pressing a key to indicate which region of a screen contains an object of interest. Detection : Requires the viewer to indicate whether or not they perceive the presence of a stimulus. Two common types of detection are visual search and change detection. Rapid Serial Visual Presentation (RSVP) : In the RSVP paradigm, viewers are shown a set of images quickly in a sequence, with at least one target image. Viewers then identify either the target image or target category (e.g. press the button when you see a positive correlation). Matching : The viewer adjusts one stimulus until it matches another. For instance, adjusting the size of a square until it has the same area as a rectangle also present on the screen. Discrimination : Viewers make comparative judgments about the magnitude of two stimuli, often side-by-side. For example: indicating which of two images has a higher total luminance. Identification : Viewers respond with the identity of the stimulus using open-ended answers. Estimation : Viewers directly estimate some value of a continuous feature in a display. Estimation paradigm experiments differ from the classification paradigm: where a viewer might classify a correlation as \"low\" or \"steep\", an estimation paradigm would require them to produce the magnitude numerically as \"0.2\" or \"0.8\".","title":"Paradigms"},{"location":"research/terminology/#adjustment-types","text":"Method of Limits [MoL] : The researcher steadily adjusts a property of a stimulus until it is seen or no longer seen by the participant. For example, displaying white dots on a white background, and darkening them until they are perceptible. This can be done either as ascending or descending, and it is not uncommon to see both within the same experiment. Method of Adjustments [MoA] : Similar to Method Limits, except it is the user who does the stimulus adjustments. For instance, a user adjusting the brightness of dots until they are perceptible or imperceptible. Method of Constant Stimuli [MoCS] : The researcher presents viewers with random levels of a target property, and the user is asked to draw inferences. From the previous examples, dots would be shown at various brightness levels, and the user indicates whether or not they are present or absent each trial. Adaptive Psychophysical Procedures [APP] : Researchers adjust visualizations for users based on their current performance relative to a threshold. A common APP used within the VCL Web Framework is staircasing, as seen in the JND experiment. Users indicate which of two scatterplots is more correlated. If the user responds correctly, the next pair of scatterplots have closer correlation values; if they respond incorrectly, the correlation values are farther apart. The adjustments continue until a steady-state criteria is met (e.g. 50% accuracy over n trials).","title":"Adjustment Types"},{"location":"research/terminology/#response-types","text":"Stimulus Level : Users give direct reports indicating perceived values. For example, dragging a slider to indicate the average height of bars in a bar chart. Viewers can report stimulus levels verbally, by typing in a value, or visually by recreating the stimulus level. 2AFC : Two-alternative forced-choice tasks give viewers two options of response after perceiving certain stimuli. For example, being shown two stimuli and asking users to indicate which one was darker. Two common choices for 2AFC are comparison and categorization. NAFC : The N-alternative forced-choice task is a scaled-up version of the 2AFC. For example, a 2AFC task might involve users indicating whether or not a chart matches a regression line 'yes' or 'no', while an NAFC might provide several charts and the user must choose one that matches.","title":"Response Types"},{"location":"research/terminology/#dependent-measures","text":"Direct Dependent Measures : A single number directly measuring how well people process visual information. Some examples: Accuracy : Measures how close to the true value are people's judgments. Measured in two ways: percentage correct (how often they get the answer right), and error (how close they were). Response Time : Measures how quickly a task with one stimulus is completed. Precision : The variability of participants' answers, measured as a threshold of performance, for example, the level of brightness at which a stimulus becomes visible. One of the most common of these is a just noticeable difference (JND), a threshold at which people can generally detect a difference. Model-Based Dependent Measures : A model generated by factors such as (but not limited to) reaction time and accuracy. Performance Slope : Using accuracy or RT to model how these measures change as a function of the difficulty of the task. E.g. how quickly and accurately can a participant locate a target as the number of targets increases. Psychometric Function : Models how performance changes (e.g., the number of correct or incorrect decisions) as a function of design (e.g. the luminance range of a colormap). Sensitivity & Bias Detection : Models performance as a function of sensitivity (change as the data or design changes) and bias (tendency to a certain response).","title":"Dependent Measures"},{"location":"research/terminology/#properties","text":"Balancing : the ways in which the subconditions for a given condition are ordered. Random Latin-Square Graph Type : e.g. scatter plots, ring plots, strip plots, shapes Graphical Manipulation : May be on how the points are plotted e.g. for strip plots, a y coordinate defines the horizontal translation of the \"strip\" and x coordinate defines the height of the \"strip\". May be in terms of how many distributions are plotted on the same graph e.g. on the same axes, we can have TWO scatter plots with different correlations.","title":"Properties"},{"location":"research/terminology/#condition-identifiers","text":"Each condition is uniquely defined by 4 properties.","title":"Condition Identifiers"},{"location":"research/terminology/#base-experiment","text":"The experiment that the condition is an iteration of.","title":"Base Experiment"},{"location":"research/terminology/#trial-structure","text":"The trial structure represents the range or pattern of correlation values, and defines a set of constants for each subcondition. Each condition can follow these pattern of values, or use its own custom structure. The two main types of patterns are Design or Foundational. Foundational : 17 subconditions, base correlation is in the range of [0.0, 0.9] in 0.1 increments. Design : 15 subconditions, grouped into five sets of base correlation values set at 0.3, 0.6, 0.9 . Estimation Custom : used when a condition does not follow any of the above structures.","title":"Trial Structure"},{"location":"research/terminology/#balancing","text":"How subconditions in a given condition get ordered. Randomized : Purely random. Latin Square : An n \u00d7 n array of n different elements such that each element will occur exactly once in each column and once in each row. For example, a 3 \u00d7 3 Latin Square would be ordered like this: C A B B C A A B C The objective of a Latin Square is to have participants with unique subcondition orderings. Additionally, it helps control randomness in such a way that biases are reduced, e.g. subcondition A is not randomly selected first at a disproportionate amount.","title":"Balancing"},{"location":"research/terminology/#graph-types","text":"The type of graph used in the visualization. Scatter : Scatterplots. Strip : Strip plots. Ring : Ring plots. Shapes : Shapes appearing side by side.","title":"Graph Types"},{"location":"research/terminology/#attributes","text":"Any given condition will always have a base, trial structure, balancing and graph type. However, they will also have a set of variables that manipulate different aspects of the distribution, graphical properties of the visualization, and non-graphical properties such as having a custom instruction set. Here is a non-comprehensive list of properties that could be manipulated by a condition. Experimental attributes : Distribution type. Base correlation of the reference plot. Whether the correlation converges from above or below. Complete list of experimental attributes here . Graphical attributes : Some examples if plot type = scatter : Point shape Point color Point size Some examples if plot type = strip : Line length Line width Complete list of graphical attributes here . Definitions adapted from: Elliott, M. A., Nothelfer, C., Xiong, C., & Szafir, D. A. (2021). A Design Space of Vision Science Methods for Visualization Research. IEEE Transactions on Visualization and Computer Graphics , 27(2), 1117\u20131127. https://doi.org/10.1109/tvcg.2020.3029413 Pelli, D. G., & Farell, B. (2010). Psychophysical methods. In M. Bass, C. DeCusatis. J. Enoch, V. Lakshminarayanan, G. Li, C. MacDonald, V. Mahajan & E. V. Stryland (Eds.), Handbook of Optics. Third Edition, Volume III: Visioo and Vision Optics (pp. 3.1-3.12). New York: McGraw-Hill. https://denispelli.com/pubs/pelli2010methods.pdf","title":"Attributes"},{"location":"research/terminology_old/","text":"Terminology Below is common terminology the lab uses when describing experiments. Describing an Experiment Every experiment has the following attributes: Experiment : the type of task to be performed. Condition : dictated by the task, the method(s) used, and the stimuli type. Subcondition : a set of stable constants. Trial : marked by the user making a meaningful response/input that is purposely recorded. E.g. I am trying to adjust the correlation of a specific plot to be the midpoint between a plot with a high correlation, and a plot with a lower correlation. The final correlation that I have adjusted marks the relevant trial data to be saved. Action : the actions a user can make within a trial. E.g. In the above trial example, I can be taking actions to increase or decrease my correlation. Task The decision task defined in terms of the stimuli and question posed. Detection : \"there may be any number of alternative stimuli, but one is blank, and the observer is asked only to distinguish between the blank and the other stimuli.\" Discrimination : \"there are any number of alternative stimuli, but one of the stimuli (which need not be blank), is designated as the reference, and the observer is asked only to distinguish between the reference and other stimuli.\" Method Forced Choice : \"traditionally characterized by two separate stimulus presentations, one blank and one nonblank, in random order. The two stimuli may be presented successively or side by side. The observer is asked whether the nonblank stimulus was first or second (or on the left or right).\" Matching : \"two stimuli are presented, and the observer is asked to adjust one to match the other.\" Staircase : \"for difference thresholds, a variable stimulus is adjusted to increase its absolute difference from a standard stimulus whenever the difference is not discriminated or is adjusted to decrease its absolute difference from the standard stimulus whenever the difference is discriminated.\" E.g. We have two scatter plots side by side. Let us say plot A has r = 0.5 and plot B has r = 0.8 . The task is to pick the plot with the higher correlation. You correctly pick plot B: So the next trial will be harder, in that the correlations of the two plots are now closer together. For example, plot A would have r = 0.5 and plot B would have r = 0.7 . You incorrectly pick plot A: So the next trial will be easier, in that the correlations of the two plots are now wider apart. For example, plot A would have r = 0.5 and plot B would have r = 0.9 . Properties Balancing : the ways in which the subconditions for a given condition are ordered. Random Latin-Square Graph Type : e.g. scatter plots, ring plots, strip plots, shapes Graphical Manipulation : May be on how the points are plotted e.g. for strip plots, a y coordinate defines the horizontal translation of the \"strip\" and x coordinate defines the height of the \"strip\". May be in terms of how many distributions are plotted on the same graph e.g. on the same axes, we can have TWO scatter plots with different correlations. Definitions adapted from: Pelli, D. G., & Farell, B. (2010). Psychophysical methods. In M. Bass, C. DeCusatis. J. Enoch, V. Lakshminarayanan, G. Li, C. MacDonald, V. Mahajan & E. V. Stryland (Eds.), Handbook of Optics. Third Edition, Volume III: Visioo and Vision Optics (pp. 3.1-3.12). New York: McGraw-Hill. https://denispelli.com/pubs/pelli2010methods.pdf Condition Identifiers Each condition is uniquely defined by 4 properties. Base Experiment Defines the underlying procedural logic of the experiment. JND Stevens Estimation Numerosity Visual Search Ensemble Average Trial Structure The trial structure represents the range or pattern of correlation values, and defines a set of constants for each subcondition. Each condition can follow these pattern of values, or use its own custom structure. The two main types of patterns are Design or Foundational. Foundational : 17 subconditions, base correlation is in the range of [0.0, 0.9] in 0.1 increments. Design : 15 subconditions, grouped into five sets with base correlation values set at 0.3, 0.6, 0.9 . Estimation Custom : used when a condition does not follow any of the above structures. Balancing How subconditions in a given condition get ordered. Randomized : Purely random. Latin Square : An n \u00d7 n array of n different elements such that each element will occur exactly once in each column and once in each row. For example, a 3 \u00d7 3 Latin Square would be ordered like this: C A B B C A A B C Graph Types The type of graph used in the visualization. Scatter : Scatterplots. Strip : Strip plots. Ring : Ring plots. Shapes : Shapes appearing side by side. Attributes Any given condition will always have a base, trial structure, balancing and graph type. However, they will also have a set of variables that manipulate different aspects of the distribution, graphical properties of the visualization, and non-graphical properties such as having a custom instruction set. Here is a non-comprehensive list of properties that could be manipulated by a condition. Experimental attributes: Distribution type. Base correlation of the reference plot. Whether the correlation converges from above or below. Complete list of experimental attributes here . Graphical attributes: Some examples if plot type = scatter : Point shape Point color Point size Some examples if plot type = strip : Line length Line width Complete list of graphical attributes here .","title":"Terminology"},{"location":"research/terminology_old/#terminology","text":"Below is common terminology the lab uses when describing experiments.","title":"Terminology"},{"location":"research/terminology_old/#describing-an-experiment","text":"Every experiment has the following attributes: Experiment : the type of task to be performed. Condition : dictated by the task, the method(s) used, and the stimuli type. Subcondition : a set of stable constants. Trial : marked by the user making a meaningful response/input that is purposely recorded. E.g. I am trying to adjust the correlation of a specific plot to be the midpoint between a plot with a high correlation, and a plot with a lower correlation. The final correlation that I have adjusted marks the relevant trial data to be saved. Action : the actions a user can make within a trial. E.g. In the above trial example, I can be taking actions to increase or decrease my correlation.","title":"Describing an Experiment"},{"location":"research/terminology_old/#task","text":"The decision task defined in terms of the stimuli and question posed. Detection : \"there may be any number of alternative stimuli, but one is blank, and the observer is asked only to distinguish between the blank and the other stimuli.\" Discrimination : \"there are any number of alternative stimuli, but one of the stimuli (which need not be blank), is designated as the reference, and the observer is asked only to distinguish between the reference and other stimuli.\"","title":"Task"},{"location":"research/terminology_old/#method","text":"Forced Choice : \"traditionally characterized by two separate stimulus presentations, one blank and one nonblank, in random order. The two stimuli may be presented successively or side by side. The observer is asked whether the nonblank stimulus was first or second (or on the left or right).\" Matching : \"two stimuli are presented, and the observer is asked to adjust one to match the other.\" Staircase : \"for difference thresholds, a variable stimulus is adjusted to increase its absolute difference from a standard stimulus whenever the difference is not discriminated or is adjusted to decrease its absolute difference from the standard stimulus whenever the difference is discriminated.\" E.g. We have two scatter plots side by side. Let us say plot A has r = 0.5 and plot B has r = 0.8 . The task is to pick the plot with the higher correlation. You correctly pick plot B: So the next trial will be harder, in that the correlations of the two plots are now closer together. For example, plot A would have r = 0.5 and plot B would have r = 0.7 . You incorrectly pick plot A: So the next trial will be easier, in that the correlations of the two plots are now wider apart. For example, plot A would have r = 0.5 and plot B would have r = 0.9 .","title":"Method"},{"location":"research/terminology_old/#properties","text":"Balancing : the ways in which the subconditions for a given condition are ordered. Random Latin-Square Graph Type : e.g. scatter plots, ring plots, strip plots, shapes Graphical Manipulation : May be on how the points are plotted e.g. for strip plots, a y coordinate defines the horizontal translation of the \"strip\" and x coordinate defines the height of the \"strip\". May be in terms of how many distributions are plotted on the same graph e.g. on the same axes, we can have TWO scatter plots with different correlations. Definitions adapted from: Pelli, D. G., & Farell, B. (2010). Psychophysical methods. In M. Bass, C. DeCusatis. J. Enoch, V. Lakshminarayanan, G. Li, C. MacDonald, V. Mahajan & E. V. Stryland (Eds.), Handbook of Optics. Third Edition, Volume III: Visioo and Vision Optics (pp. 3.1-3.12). New York: McGraw-Hill. https://denispelli.com/pubs/pelli2010methods.pdf","title":"Properties"},{"location":"research/terminology_old/#condition-identifiers","text":"Each condition is uniquely defined by 4 properties.","title":"Condition Identifiers"},{"location":"research/terminology_old/#base-experiment","text":"Defines the underlying procedural logic of the experiment. JND Stevens Estimation Numerosity Visual Search Ensemble Average","title":"Base Experiment"},{"location":"research/terminology_old/#trial-structure","text":"The trial structure represents the range or pattern of correlation values, and defines a set of constants for each subcondition. Each condition can follow these pattern of values, or use its own custom structure. The two main types of patterns are Design or Foundational. Foundational : 17 subconditions, base correlation is in the range of [0.0, 0.9] in 0.1 increments. Design : 15 subconditions, grouped into five sets with base correlation values set at 0.3, 0.6, 0.9 . Estimation Custom : used when a condition does not follow any of the above structures.","title":"Trial Structure"},{"location":"research/terminology_old/#balancing","text":"How subconditions in a given condition get ordered. Randomized : Purely random. Latin Square : An n \u00d7 n array of n different elements such that each element will occur exactly once in each column and once in each row. For example, a 3 \u00d7 3 Latin Square would be ordered like this: C A B B C A A B C","title":"Balancing"},{"location":"research/terminology_old/#graph-types","text":"The type of graph used in the visualization. Scatter : Scatterplots. Strip : Strip plots. Ring : Ring plots. Shapes : Shapes appearing side by side.","title":"Graph Types"},{"location":"research/terminology_old/#attributes","text":"Any given condition will always have a base, trial structure, balancing and graph type. However, they will also have a set of variables that manipulate different aspects of the distribution, graphical properties of the visualization, and non-graphical properties such as having a custom instruction set. Here is a non-comprehensive list of properties that could be manipulated by a condition. Experimental attributes: Distribution type. Base correlation of the reference plot. Whether the correlation converges from above or below. Complete list of experimental attributes here . Graphical attributes: Some examples if plot type = scatter : Point shape Point color Point size Some examples if plot type = strip : Line length Line width Complete list of graphical attributes here .","title":"Attributes"}]}